{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["MTableEditFieldWithErrorHandler","props","columnDef","rowData","errors","field","isNewRow","id","error","react_default","a","createElement","key","style","display","color","fontSize","dist","__webpack_exports__","dispatch","useDispatch","users","useSelector","state","allIds","map","Object","assign","byId","_useState","useState","formErrors","setFormErrors","keys","length","u","set","omit","useEffect","Array","fill","forEach","addRandomUser","Helmet_default","rel","href","dist_default","title","options","pageSize","columns","editable","data","onRowAdd","_onRowAdd","asyncToGenerator_default","regenerator_default","mark","_callee","newUser","wrap","_context","prev","next","abrupt","addUser","t0","stop","_x","apply","this","arguments","onRowUpdate","_onRowUpdate","_callee2","updatedUser","_context2","updateUser","_x2","onRowDelete","_onRowDelete","_callee3","user","_context3","delUser","_x3","components","EditField","pages_MTableEditFieldWithErrorHandler"],"mappings":"6QAQMA,EAAkC,SAAAC,GAAS,IACvCC,EAA+BD,EAA/BC,UAAWC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,OACtBC,EAAQH,EAAUG,MAElBC,GAAYH,EAAQI,IAAqB,aAAdH,EAAOG,GAElCC,GAAUL,EAAQI,KAAOH,EAAOG,IAAOD,IAAaF,EAAOC,GAEjE,OACEI,EAAAC,EAAAC,cAAA,OAAKC,IAAKT,EAAQI,IACdC,GACAC,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CACZC,QAAS,QACTC,MAAO,MACPC,SAAU,SAEVR,GAGJC,EAAAC,EAAAC,cAACM,EAAA,gBAAoBhB,KAKZiB,EAAA,mBACb,IAAMC,EAAWC,cAIbC,EAAQC,YACV,SAAAC,GAAK,OAAIA,EAAMF,MAAMG,OAAOC,IAAI,SAAAlB,GAAE,OAAAmB,OAAAC,OAAA,GAAUJ,EAAMF,MAAMO,KAAKrB,QAN5CsB,EASiBC,mBAAS,IAAtCC,EATYF,EAAA,GASAG,EATAH,EAAA,GAuBnB,OAVAR,EAFiBK,OAAOO,KAAKF,GAAYG,OAAS,EAG9Cb,EAAMI,IAAI,SAAAU,GAAC,OAAKA,EAAE5B,KAAOwB,EAAWxB,GAAM6B,cAAID,EAAG,oBAAqB,UAAYA,IAClFd,EAAMI,IAAI,SAAAU,GAAC,OAAIE,eAAKF,EAAG,CAAC,wBAE5BG,oBAAU,WACRC,MAAM,GAAGC,OAAOC,QAAQ,WACtBtB,EAASuB,kBAEV,IAGDjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMiC,IAAI,aAAaC,KAAK,6DAE9BpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CACEqC,MAAM,yBACNC,QAAS,CACPC,SAAU,IAEZC,QAAS,CACP,CAAEH,MAAO,MAAO1C,MAAO,SAAU8C,SAAU,SAC3C,CAAEJ,MAAO,OAAQ1C,MAAO,QACxB,CAAE0C,MAAO,QAAS1C,MAAO,SACzB,CAAE0C,MAAO,QAAS1C,MAAO,UAE3B+C,KAAM/B,EACN8B,SAAU,CACRE,SAAQ,eAAAC,EAAAC,IAAAC,EAAA9C,EAAA+C,KAAE,SAAAC,EAAMC,GAAN,OAAAH,EAAA9C,EAAAkD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACR/B,EAAc,IADN6B,EAAAC,KAAA,EAAAD,EAAAG,OAAA,SAGC7C,EAAS8C,YAAQN,KAHlB,aAAAE,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAKN7B,EAAaN,OAAAC,OAAA,CACXpB,GAAI,YADOsD,EAAAK,KALPL,EAAAK,GAAA,wBAAAL,EAAAM,SAAAT,EAAA,iBAAF,gBAAAU,GAAA,OAAAd,EAAAe,MAAAC,KAAAC,YAAA,GAYRC,YAAW,eAAAC,EAAAlB,IAAAC,EAAA9C,EAAA+C,KAAE,SAAAiB,EAAMC,GAAN,OAAAnB,EAAA9C,EAAAkD,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cACX/B,EAAc,IADH4C,EAAAd,KAAA,EAAAc,EAAAZ,OAAA,SAGF7C,EAAS0D,YAAWF,KAHlB,aAAAC,EAAAd,KAAA,EAAAc,EAAAV,GAAAU,EAAA,SAKT5C,EAAaN,OAAAC,OAAA,CACXpB,GAAIoE,EAAYpE,IADLqE,EAAAV,KALJU,EAAAV,GAAA,wBAAAU,EAAAT,SAAAO,EAAA,iBAAF,gBAAAI,GAAA,OAAAL,EAAAJ,MAAAC,KAAAC,YAAA,GAYXQ,YAAW,eAAAC,EAAAzB,IAAAC,EAAA9C,EAAA+C,KAAE,SAAAwB,EAAMC,GAAN,OAAA1B,EAAA9C,EAAAkD,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,cAAAoB,EAAAnB,OAAA,SACJ7C,EAASiE,YAAQF,EAAK3E,MADlB,wBAAA4E,EAAAhB,SAAAc,MAAF,gBAAAI,GAAA,OAAAL,EAAAX,MAAAC,KAAAC,YAAA,IAIbe,WAAY,CACVC,UAAW,SAAAtF,GAAK,OAAIQ,EAAAC,EAAAC,cAAC6E,EAAD9D,OAAAC,OAAA,GAAqC1B,EAArC,CAA4CG,OAAQ2B","file":"component---src-pages-index-js-02defd46d0c65df9e2fe.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport { set, omit } from 'lodash';\nimport Table, { MTableEditField } from 'material-table';\n\nimport { addRandomUser, addUser, updateUser, delUser } from '../redux/actions';\n\nconst MTableEditFieldWithErrorHandler = props => {\n  const { columnDef, rowData, errors } = props;\n  const field = columnDef.field;\n\n  const isNewRow = !rowData.id && (errors.id === 'new user');\n\n  const error = ((rowData.id === errors.id) || isNewRow) && errors[field];\n\n  return (\n    <div key={rowData.id}>\n      { error && (\n        <label style={{\n          display: 'block',\n          color: 'red',\n          fontSize: '13px',\n        }}>\n        { error }\n        </label>\n      )}\n      <MTableEditField {...props} />\n    </div>\n  );\n}\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  // Material Table will add some property in feeded data\n  // that causes input will not close when updated.\n  let users = useSelector(\n    state => state.users.allIds.map(id => ({ ...state.users.byId[id] })),\n  );\n\n  const [formErrors, setFormErrors] = useState({});\n\n  const hasError = Object.keys(formErrors).length > 0;\n\n  users = hasError\n    ? users.map(u => (u.id === formErrors.id) ? set(u, 'tableData.editing', 'update') : u)\n    : users.map(u => omit(u, ['tableData.editing']));\n\n  useEffect(() => {\n    Array(5).fill().forEach(() => {\n      dispatch(addRandomUser());\n    })\n  }, []);\n\n  return (\n    <div>\n      <Helmet>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      </Helmet>\n      <Table\n        title='Rakuten Front End Test'\n        options={{\n          pageSize: 10,\n        }}\n        columns={[\n          { title: 'No.', field: 'number', editable: 'never' },\n          { title: 'Name', field: 'name' },\n          { title: 'Phone', field: 'phone' },\n          { title: 'Email', field: 'email' },\n        ]}\n        data={users}\n        editable={{\n          onRowAdd: async newUser => {\n            setFormErrors({});\n            try {\n              return dispatch(addUser(newUser));\n            } catch (e) {\n              setFormErrors({\n                id: 'new user',\n                ...e,\n              });\n              throw e;\n            }\n          },\n          onRowUpdate: async updatedUser => {\n            setFormErrors({});\n            try {\n              return dispatch(updateUser(updatedUser));\n            } catch (e) {\n              setFormErrors({\n                id: updatedUser.id,\n                ...e,\n              });\n              throw e;\n            }\n          },\n          onRowDelete: async user => {\n            return dispatch(delUser(user.id));\n          },\n        }}\n        components={{\n          EditField: props => <MTableEditFieldWithErrorHandler {...props} errors={formErrors} />\n        }}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}